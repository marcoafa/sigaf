EN REGISTRO DE CARGA
//alert(uas); FUNCION GENERAR CARGA
				$("#semestre1 tbody:not(:eq(2)),#semestre2 tbody:not(:eq(2)),#semestre3 tbody:not(:eq(2)),#semestre4 tbody:not(:eq(2)),#semestre5 tbody:not(:eq(2)),#semestre6 tbody:not(:eq(2)),#semestre7 tbody:not(:eq(2)),#semestre8 tbody:not(:eq(2)),#semestre9 tbody:not(:eq(2))").html("");
				for (var i = 0; i < uas.length; i++)
				{
					var renglon = "";
					// Poner en la seccion correspondiente de la tabla si es obligatoria:1 o seriada:2.
					if (uas[i].caracter == 1)
					{
						renglon = "<tr><td>"+uas[i].uaprendizaje+"</td><td>"+uas[i].descripcionmat+"</td><td>"+uas[i].creditos+"</td><td>"+uas[i].HC+"</td><td>"+uas[i].etapa+"</td><td>"+uas[i].claveD+"</td><td><input type='button' value='-'' title='Eliminar' class='clsEliminarFila' id='eliminar'/></td></tr>";
						$("#semestre"+uas[i].semestre+" tbody:eq(0)").append(renglon);
					}
					else
					{
						var ua = uas[i].uaprendizaje;
						var semestreua = uas[i].semestre;
						var renglonGrupos = "";
						// Obtener los grupos a los que pertenece la ua de tipo optativa
						$.ajax({
							type: "POST",
							url:"<?php echo URL::to('cargaacademica/obtenergruposua'); ?>",
							data: {uaprendizaje:ua,semestre:semestreua},
							dataType: "json",
							success: function(grupos){
								renglonGrupos = "";
								for(var j=0;j<grupos.length;j++)
								{
									if(j == grupos.length-1)
										renglonGrupos+=grupos[j].grupo;
									else
										renglonGrupos+=grupos[j].grupo + ", ";
								}
							},
							async:false
						});
						renglon="<tr><td>"+uas[i].uaprendizaje+"</td><td>"+uas[i].descripcionmat+" "+renglonGrupos+"</td><td>"+uas[i].creditos+"</td><td>"+uas[i].HC+"</td><td>"+uas[i].etapa+"</td><td>"+uas[i].claveD+"</td><td><input type='button' value='-'' title='Eliminar' class='clsEliminarFila' id='eliminar'/></td></tr>";
						$("#semestre"+uas[i].semestre+" tbody:eq(1)").append(renglon);
						//alert("Si fue sincrono");
					}
				}

				function agregarGruposSemestre(semestre,selectGrupos,callback)
				{
					// Cargar grupos en la tabla correspondiente
					var gruposCompletos = [];
					$(selectGrupos).find("option").each(function(index,element){
						gruposCompletos.push($(element).text());
					});

					$.post("<?php echo URL::to('cargaacademica/obtenerturnos'); ?>",{grupos:gruposCompletos},function(data){
						callback(data);

					})
					.fail(function(errorText,textError,errorThrow){
						alert(errorText.responseText);
					});
				}

				agregarGruposSemestre(semestre,selectGrupos,function(data){
					$("#semestre" + semestre + " tbody:eq(2)").html("<tr><td colspan='2'>"+data+"</td></tr>");
				});


EN REGISTRO DE PLAN DE ESTUDIO

	// INICIALIZAR MULTISELECTS DE PROGRAMAS EDUCATIVOS (CARRERAS)
		$('.example41').multiselect({
			includeSelectAllOption: true,
			onChange: function(element, checked,index){
				var brands = $('.example41 option:selected');
				var selected = [];
				$(brands).each(function(index, brand){
					selected.push([$(this).val()]);
				});
				// Asignar arreglos para guardar los números de las carreras
				$("#carreras").val(selected);

				// En caso de actualizar guardar solo las nuevas
				if($("#guardar").val()=="Actualizar")
				{
					if($(element).val()!=undefined) // Si no seleccionan todas las carreras
					{
						if(checked==true)
						{
							updated.push($(element).val());
						}
						else
						{
							var pos = updated.indexOf($(element).val());
							pos > -1 && updated.splice(pos,1);
						}
						//alert(updated);
					}
					else
					{
						if(checked==true)
						{
							updated = [];
							$('#select_carreras + div > button + .multiselect-container li input:enabled').each(function(index,element){
								if(index!=0)
									updated.push($(element).val());
							});
						}
						else
						{
							updated=[];
						}
						//alert(updated);
					}
				}
				$("#add_carreras").val(updated);
			}
		});

		<input type="button" style="width:120px"class="estilo_button2" type="button" value="Ver" name="ver" id="ver" />
		$("#ver").on("click",function(){
			alert("Mi zorrita esta cachorra y la adoro a la tontassss");
			alert($("#select_carreras").val());
		});


// PARA EL CASO DE LAS SERIACIONES CUANDO EXISTIA EL SIN SERIACION
/* Habilitar inputs cuando elijan seriacion
		$(".tblCatPlanAgregarSeriacion").on("change",".tipo-seriacion",function(){
			var opcionSerie = $(this).val();
			if(opcionSerie==1)
			{
				var filaSeriacion = $(this).parents().get(1);
				$(filaSeriacion).find(".clave-seriacion").attr('disabled',true).val("");
				$(filaSeriacion).find(".clave-seriacion-descripcion").val("");
			}
			else
			{
				var filaSeriacion = $(this).parents().get(1);
				$(filaSeriacion).find(".clave-seriacion").removeAttr('disabled').val("");
			}
		});*/

CUANDO ERA UNA MATERIA INDIVIDUAL SERIADA
	/* VERIFICAR QUE SELECCIONEN UNA CLAVE DE SERIACION CUANDO (OBLIGATORIA, SUGERIDA)
		$("#clave2F").on("focusout",function(){
			if($("#serie").val()!=1){
				if($(this).val().length<1)
					$(this).css("background-color","pink");
				else
					$(this).css("background-color","");
			}

		});*/

CONSULTA PEEEEEEEEEEEEEEEE
///////////////////////////// EN LA VENTANA MODAL DE ACTUALIZACION //////////////////////////////////////
// Si se quita el foco de la clave seriada mostrar nombre
		$("#claveSeriacion_update").on("focusout",function(){
			if($(this).val()!="")
			{
				var idua = $(this).val();
				$.post("<?php echo URL::to('planestudio/obtenermateria'); ?>",{uaprendizaje:idua},function(materia){
					$("#descripcionSeriacion_update").val(materia);
				});
			}
		});

		// Si se selecciono tipo de seriacion que no sea SIN SERIACION
		$("#seriacion_update").on("change",function(){
			if($(this).val()!=1)
				$("#claveSeriacion_update").attr("disabled",false);
			else
			{
				$("#claveSeriacion_update").val("");
				$("#claveSeriacion_update").attr("disabled",true);
			}
		});

NUEVAS MODIFICACIONES A PE

//***** Agregar registro al Datatable para consulta, modificacion, etc.
				/* Guardar las materias seriadas
				var uasSeriadas = [];
				if($(".tblCatPlanAgregarSeriacion > tbody > tr").length > 2)
				{
					$(".tblCatPlanAgregarSeriacion > tbody > tr").each(function(index,element){
						if(index >= 2) // Si no es sin seriacion, ni la fila base.
						{
							uasSeriadas.push($(element).find("input").first().val()); // Agregar al arreglo la serie de la carrera.
						}
					});
					uasSeriadas = uasSeriadas.join(",") // Unir por coma para mostrar en el renglon.
				}
				else
				{
					uasSeriadas = "SIN SERIACIÓN";
				}
				// Agregar fila por cada carrera seleccionada
				$('#select_carreras + div > button + .multiselect-container li').each(function(indice,elemento){
					if($(elemento).hasClass('active') && indice != 0)
					{
						var input = $(elemento).find('input').val(); // Obtener el value de la carrera su id.
						t.row.add([
									clave1F,
									materia.toUpperCase(),
									$(elemento).text(), // El nombre de la carrera
									etapaF,
									tipoF,
									uasSeriadas,
									coord,
									hc,
									hl,
									ht,
									creditosF,
									"<input type='button' value='' title='"+clave1F+"' data="+input+" class='clsEliminarFila'>",
									"<input type='button' value='-' title='"+clave1F+"' data="+input+" class='clsEliminarFila'>"]).draw();
					}
				});
				alert(data);
				$("#materia").css({"background-color":"white","color":"black","font-size":"100%"});
				reset_campos();
				//desmarcar_carreras();alert(data);
				*/
PHP

// Insertar en 'p_ua' las carreras que contendran esa Unidad de Aprendizaje
			// $programas = explode(",",Input::get('carreras')); Cuando lo hacia de la manera compleja
			// $programas = Input::get('carreras');
			// $etapa = Input::get('etapaF');
			/*foreach ($programas as $carrera) {
				DB::table('p_ua') -> insert(array('programaedu' => $carrera,'uaprendizaje' => $clave,'etapa' => $etapa,'users_id' => $users_id));
			}

			// Capturar claves seriadas[11236,11237] y tipos [OBLIGATORIAS,OPTATIVAS]
			$tipos = Input::get("seriacion_tipo");
			$claves = Input::get("seriacion_clave");
			// Registrar las materias seriadas en detalleseriacion si existen registros
			if(isset($claves))
			{
				foreach ($claves as $key => $value) {
					DB::table('detalleseriacion') -> insert(array('uaprendizaje'=>$clave,'reqseriacion'=>$tipos[$key],'uaprequisito'=>$claves[$key],'users_id'=>$users_id));
				}
			}*/


/*
		var sourcePlanVigente = [
									@for ($i = 0;$i<count($unidades[0]);$i++)
										{{"'".$unidades[0][$i]->uaprendizaje." - ".$unidades[0][$i]->descripcionmat."'"}}
											@if ($i<count($unidades[0])-1)
												{{","}}
											@endif
									@endfor
								];
		var sourcePlanAnterior =[
									@for ($i = 0;$i<count($unidades[1]);$i++)
										{{"'".$unidades[1][$i]->uaprendizaje." - ".$unidades[1][$i]->descripcionmat."'"}}
										@if($i<count($unidades[1])-1)
											{{","}}
										@endif
									@endfor
								];
		planVigente = {{$planes[0]}};
		planAnterior = {{$planes[1]}};
		//alert(source[0].plan);
*/

@foreach ($programas as $program)
								<option value="{{$program->programaedu}}">{{$program->descripcion}}</option>
							@endforeach



							@foreach ($codigosPeriodo as $periodo)
							<option value="{{$periodo['formato']}}" codigo="{{$periodo['codigo']}}" />
						@endforeach

/* Asingar nombres de planes
		$("#nombreVigente").text("Plan "+insertStr({{'"'.$planes[0].'"'}},"-",4));
		$("#nombreAnterior").text("Plan "+insertStr({{'"'.$planes[1].'"'}},"-",4));
		$("#grupoPlanVigente").text(insertStr({{'"'.$planes[0].'"'}},"-",4));
		$("#grupoPlanAnterior").text(insertStr({{'"'.$planes[1].'"'}},"-",4));
		$("#grupoVigentePlan").val({{$planes[0]}});
		$("#grupoAnteriorPlan").val({{$planes[1]}});
		*/


// Check several items.
			// $(".listbox").jqxListBox('checkIndex', 0);
			// $(".listbox").jqxListBox('checkIndex', 1);
			// $(".listbox").jqxListBox('checkIndex', 2);
			// $(".listbox").jqxListBox('checkIndex', 5);

	/*var args = event.args;
				if (args.checked) {
					$("#Events").text("Checked: " + args.label);
				}
				else {
					$("#Events").text("Unchecked: " + args.label);
				}*/


/*if (index < items.length - 1) {
						checkedItems += this.label + ", ";
					}
					else checkedItems += this.label;*/


				//alert(uasVigente);
				//$("#CheckedItems").text(checkedItems);


,'planes'

// Cargar input para crear grupos con el semestre elegido
				$("#grupoSemestreV,#grupoSemestreA").val(1);

				var numPlanes = $("#planes").val();

				/*if(numPlanes == 1)
				{
					var planV = data.unidades[data.planes[0]];
					for(key in planV)
					{

					}
				}*/

				console.log(data);
				console.log(data.planes[0].plan);
				console.log(data.unidades[data.planes[0].plan]);



		// 20101 , 20102
		$planWhereIn = [];
		foreach ($planes as $key => $value) {
			array_push($planWhereIn, $planes[$key]->plan);
		}

var numPlanes = $("#planes").val();
					// Evaluar el despliegue de 1 o 2 planes
					var planS = data.unidades[data.planes[0].plan];
					var sourcePV = [];
					var sourcePA = [];

					for(key in planS)
					{
						sourcePV.push(planS[key].uaprendizaje + " - " + planS[key].descripcionmat);
					}

					console.log(sourcePV);

					$("#listboxPlanVigente").jqxListBox({source: sourcePV});
					// Deshabilitar controles del plan secundario
					$("#planAnterior").find("input,select").attr('disabled',true);
					// Si son 2 planes de estudio cargar el plan sencundario
					if(numPlanes > 1)
					{
						planS = data.unidades[data.planes[1].plan];
						for(key in planS)
						{
							sourcePA.push(planS[key].uaprendizaje + " - " + planS[key].descripcionmat);
						}
						// Cargar plan anterior y habilitar controles
						$("#listboxPlanAnterior").jqxListBox({source : sourcePA});
						$("#planAnterior").find("input,select").attr('disabled',false);
					}




		// Verificar tipo de usuario
		if($numPrograma != 0)
		{

			// Unidades de aprendizaje: 20101 - 11236 - Matemáticas
			$uas = DB::table('p_ua')
					->select('uaprendizaje.plan','p_ua.uaprendizaje','uaprendizaje.descripcionmat')
					->join('uaprendizaje','p_ua.uaprendizaje','=','uaprendizaje.uaprendizaje')
					->where('p_ua.caracter','=',1)
					->where('p_ua.programaedu','=',$numPrograma)
					->whereIn('uaprendizaje.plan',$planWhereIn)
					->orderBy('plan','desc')
					->orderBy('p_ua.uaprendizaje','asc')
					->get();



			// $unidades[0][0] = $uas[0]  -> 20101
			// $unidades[0][1] = $uas[1]  -> 20101
			// $unidades[1][0] = $uas[3]  -> 20102

			$unidades  = [];
			foreach ($uas as $key => $value)
			{
				$nombrePlan = $uas[$key]->plan;
				if($nombrePlan == $planes[0]->plan)
				{
					$unidades[$nombrePlan][] = $uas[$key];
				}

				if($numPlanes > 1)
				{
					if ($nombrePlan == $planes[1]->plan)
					{
						$unidades[$nombrePlan][] = $uas[$key];
					}
				}
			}


			// Obtener nombre del programa
		$nombrePrograma = ProgramaEducativo::find($programa);
		$nombrePrograma = $nombrePrograma -> descripcion;
		$var_nombre = array("nombrePrograma");



/********CARGA FINALLLLLLLLLLLLLLLLLLLL CAMBIO ************************************************/

carga/registro.blade.php
HTML:

<!-- Verificar planes de estudio -->
	<input type="hidden" id="planes" value="{{$numPlanes}}" />


JAVASCRIPT:

var planes = $("#planes").val() > 0;
			// Verificar existencia de planes de estudio
			if(planes == false)
			{
				alert("No existen planes de estudio registrados");
				// Desactivar opciones
				$("#planVigente , #planAnterior").find("select, input").attr("disabled" , true);
			}
			else
			{
				// INICIALIZAR ENTORNO PARA GENERAR LA CARGA


				//vaar nomPlanVigente = insertStr(planVigente),"-",3);
				//$("#nombreVigente").val("Plan " + nomPlanVigente);

				// Inicializar fecha periodo
				var date = new Date();
				$("#periodoFechaInicio").val(date.now());
				$("#periodoFechaFin").val(date.now());
				//$("#periodoFechaInicio").prop('min',date.now());
				//$("#periodoFechaInicio").prop('max','2015-08-08');


				// Obtener catalogos para el registro de la carga academica
				$.get("<?php echo URL::to('cargaacademica/catalogos'); ?>",function(data)
				{
					// Asignar nombre de la coordinación en caso de que sea un usuario coordinador
					//$("#nombrePrograma").text("Lic. en " + data.nombrePrograma);

					// Asignar tipos de período a modal de registro de períodos: SEMESTRAL,SABATINO, ETC.
					var options = "";
					for(key in data.periodosPrograma)
					{
						var periodo = data.periodosPrograma[key].periodo_pedu;
						var descripcion = data.periodosPrograma[key].descripcion;
						options += "<option value='" + periodo + "'>" + descripcion + "</option>";
					}
					$("#periodoTipo").html(options);

					// Asignar tipos de carácter a la lista de los planes: OBLIGATORIO, OPTATIVA
					options = "";
					for(key in data.tiposCaracter)
					{
						var caracter = data.tiposCaracter[key].caracter;
						var descripcion = data.tiposCaracter[key].descripcion;
						options += "<option value='" + caracter + "'>" + descripcion + "</option>"
					}
					$("#selectCaracterVigente,#selectCaracterAnterior").html(options);

					// Asignar los periodos registrados: 2014-1, 2014-2
					options = "";
					for(key in data.codigosPeriodo)
					{
						var codigo = data.codigosPeriodo[key].codigo;
						var formato = data.codigosPeriodo[key].formato;
						options += "<option value = '" + codigo + "'>" + formato + "</option>";
					}
					$("#periodo").html(options);
					$("#periodo").val("");

					// Asignar los turnos para los grupos TM, TV , etc.
					options = "";
					for(key in data.turnos)
					{
						var turno = data.turnos[key].turno;
						var descripcion = data.turnos[key].descripcion;
						options += "<option value = '" + turno + "'>" + descripcion + "</option>";
					}
					$("#grupoTurno").html(options);



					// Asignar los semestres
					options = "";
					var semestres = [1,2,3,4,5,6,7,8,9];
					for(key in semestres)
					{
						/*var option = document.createElement('option');
						option.text = semestres[key];
						option.value = semestres[key];
						s.options[s.options.length] = option;*/
						options += "<option value='" + semestres[key] + "'>" + semestres[key] + "</option>";
					}
					$("#semestresVigente,#semestresAnterior").html(options);
					$("#semestresVigente , #semestresAnterior").val("");
					// Cargar input para crear grupos con el semestre elegido
					$("#grupoSemestreV,#grupoSemestreA").val(1);
				})
				.fail(function(errorText,textError,errorThrow){
					alert(errorText.responseText);
				});

				// Crear controles para las unidades de aprendizaje
				$("#listboxPlanVigente").jqxListBox({width: 480,   checkboxes: true, height: 330, theme: 'orange'});
				$("#listboxPlanAnterior").jqxListBox({width: 480, checkboxes: true, height: 330, theme: 'orange'});
				// Evento al seleccionar ua's de plan vigente.
				$("#listboxPlanVigente").on('checkChange', function (event)
				{
					var items = $("#listboxPlanVigente").jqxListBox('getCheckedItems');
					// Limpiar arreglo
					uasVigente = [];
					// Agregar al arreglo clave de unidad de aprendizaje
					$.each(items, function (index)
					{
						uasVigente.push(this.label.substring(0,5));
					});
				});
				// Evento al seleccionar ua's de plan anterior.
				$("#listboxPlanAnterior").on('checkChange', function (event)
				{

					var items = $("#listboxPlanAnterior").jqxListBox('getCheckedItems');
					// Limpiar arreglo
					uasAnterior = [];
					// Agregar al arreglo clave de unidad de aprendizaje
					$.each(items, function (index)
					{
						uasAnterior.push( this.label.substring(0 , 5) );
					});
				});


				// Mostrar controles por privilegio de usuario
				// Cargar planes de estudio.
				obtenerPlanesEstudio(function(planes){
					cargarControlesUsuario(planes);
				});

			}


FUNCIONES:

function obtenerPlanesEstudio(callback)
		{
			$.ajax({
				url : "<?php echo URL::to('cargaacademica/obtenerplanes') ?>",
				type : "post",
				success : function(planes){
					console.log(planes);
					var plan = String(planes[0]);
					$("#nombreVigente").text("Plan " + insertStr(plan,"-",4));
					$("#grupoVigentePlan").val(plan);
					$("#grupoPlanVigente").text($("#nombreVigente").text());

					if(planes.cantidad == 2)
					{
						plan = String(planes[1]);
						$("#nombreAnterior").text("Plan " + insertStr(plan,"-",4));
						$("#grupoAnteriorPlan").val(plan);
						$("#grupoPlanAnterior").text($("#nombreAnterior").text());
					}
					else
					{
						$("#planAnterior").find("input, select").attr("disabled",true);
					}
					callback(planes);
				},
				error: function(errorText,textError,errorThrow){
					alert("Error: " + errorText.responseText);
				}
			});

		}

		function cargarControlesUsuario(planes)
		{
			numPrograma = {{Auth::user()->programaedu}};
			USERS_ID = {{Auth::user()->id}};
			// Asignar usuario a la ventana modal de registro de periodos
			$("#periodoUsersId").val(USERS_ID);
			$(".grupoUsersId").val(USERS_ID);

			planVigente = planes[0];
			planAnterior = planes[1];

			// Verificar planes de estudio y pasarlos como parametros para los programas del admin.
			var planesEstudio = [];
			planesEstudio = (planes.cantidad < 2) ? [planVigente] : [planVigente,planAnterior];

			console.log(planesEstudio);
			if(numPrograma == 0) // Administrador
			{
				// Cargar programas asociados a los planes de estudio actuales
				$.ajax({
					url : "<?php echo URL::to('cargaacademica/obtenerprogramasadmin'); ?>",
					type : "post",
					data : { programa : numPrograma, planes : planesEstudio },
					dataType: "json",
					success: function(programas){

						var options = "";
						for(key in programas)
						{
							options += "<option value='"+ programas[key].programaedu +"'>" + programas[key].descripcion + "</option>";
						}
						$("#carreraAdmin").html(options);
						$("#carreraAdmin").val("");

					},
					error: function(errorText,textError,errorThrow){
						alert("Error: " + errorText.responseText);
						console.log(errorText);
					}
				});

			}
			else // Coordinador de carrera
			{
				$("#grupoCarreraV,#grupoCarreraA").val(numPrograma); // Establecer el numero de carrera para grupo
				$("#carreraAdmin, #labelCarrera").hide();
				// Obtener nombre del programa
				$.ajax({
					url: "<?php echo URL::to('cargaacademica/obtenernombreprograma'); ?>",
					type: "post",
					data : { programa : numPrograma },
					success: function(nombrePrograma){
						var nombre = String(nombrePrograma);
						$("#nombrePrograma").text("Lic. en " + nombre);
						$(".grupoPgr").text($("#nombrePrograma").text());
					},
					error: function(errorText,textError,errorThrow){
						alert("Error: " + errorText.responseText);
					}
				});
				// Treaer materias
				$.post("<?php echo URL::to('cargaacademica/obteneruas'); ?>",{noplan:planVigente,programa:numPrograma,caracter:1},function(uas){
					$("#listboxPlanVigente").jqxListBox({source:uas});
				})
				.fail(function(errorText,textError,errorThrow){
					alert(errorText.responseText);
				});

				$.post("<?php echo URL::to('cargaacademica/obteneruas'); ?>",{noplan:planAnterior,programa:numPrograma,caracter:1},function(uas){
					$("#listboxPlanAnterior").jqxListBox({source:uas});
				})
				.fail(function(errorText,textError,errorThrow){
					alert(errorText.responseText);
				});
			}

		}


CargaAcademicaController.php

public function getRegistro()
	{
		// Plan de Estudio: 20101,20092 (2 últimos planes de estudio)
		$planes = PlanEstudio::select('plan') -> orderBy('plan','desc') -> take(2) -> get();
		$numPlanes = count($planes);
		return View::make('ca.registro')->with('numPlanes',$numPlanes);
	}

public function getCatalogos()
	{
		// Cuatrimestral, Semestral
		$periodosPrograma = PeriodoPrograma::select('periodo_pedu','descripcion')->get();

		// Cargar periodos 2010-1, 2010-2
		$periodos = Periodo::select('periodo')->where('fin','>=',date_format(new DateTime("now"),'Y-m-d'))->get();

		$codigosPeriodo = array(); // ó []
		// ["20101" => "2010-1"]
		for ($i=0 ; $i < count($periodos) ; $i++)
		{
			$codigosPeriodo[] = ["codigo" => $periodos[$i]->periodo,"formato" => Snippets::str_insert("-",$periodos[$i]->periodo,4)];
		}

		// Oblitatoria, optativa
		$tiposCaracter = Caracter::select('caracter','descripcion')->get();

		// Matutino, Vespertino, Interturno
		$turnos = Turno::all();

		// 1 - Artes, 2 - Administración
		/*$numPrograma = Auth::user()->programaedu;

		// 0 - Administrador,!0 - Coordinador
		// Obtener nombre en caso de ser coordinador
		$nombrePrograma = "";
		if ($numPrograma != 0)
		{
			$nombrePrograma = ProgramaEducativo::find($numPrograma);
			$nombrePrograma = $nombrePrograma -> descripcion;
		}

		$var_nombre = array("nombrePrograma");

		// Obtener Planes
		$planes = PlanEstudio::select('plan') -> orderBy('plan','desc') -> take(2) -> get();
		$numPlanes = count($planes);
		*/
			// Catalogos y unidades de aprendizaje de los planes de estudio.
		$data = compact('periodosPrograma','codigosPeriodo','tiposCaracter','turnos','unidades');

		return Response::json($data);


	}

	/********************* EN CARGA SUBSECUENTE PARA OBTENER LOS GRUPOS POR UNIDAD DE APRENDIZAJE PARA LAS OPTATIVAS
		/*var renglonGrupos = "";
						 Obtener los grupos a los que pertenece la ua de tipo optativa
						$.ajax({
							type: "POST",
							url:"<?php echo URL::to('cargaacademica/obtenergruposua'); ?>",
							data: {uaprendizaje:ua,semestre:semestreua},
							dataType: "json",
							success: function(grupos){
								renglonGrupos = "";
								for(var j=0;j<grupos.length;j++)
								{
									if(j == grupos.length-1)
										renglonGrupos+=grupos[j].grupo;
									else
										renglonGrupos+=grupos[j].grupo + ", ";
								}
							},
							error: function(errorText,textError,errorThrow){
								alert("Error al obtener grupos asociados en la ua: " + errorText.responseText);
							},
							async:false
						});*/



	/////////// REGISTRO DE CA PARA LAS LISTAS DE LOS PLANES DE ESTUDIO
	/* Check several items.
				$("#listaUa").jqxListBox('checkIndex', 0);
				$("#listaUa").jqxListBox('checkIndex', 1);
				$("#listaUa").jqxListBox('checkIndex', 2);
				$("#listaUa").jqxListBox('checkIndex', 5);*/

				/*$("#listaUa").on('checkChange', function (event) {
					var args = event.args;
					if (args.checked) {
						$("#Events").text("Checked: " + args.label);
					}
					else {
						$("#Events").text("Unchecked: " + args.label);
					}

					var items = $("#listaUa").jqxListBox('getCheckedItems');
					var checkedItems = "";
					$.each(items, function (index) {
						if (index < items.length - 1) {
							checkedItems += this.label + ", ";
						}
						else checkedItems += this.label;
					});
					$("#CheckedItems").text(checkedItems);
				});*/
